# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
      - 'v*'
    #branches: [master]
  #pull_request:
    #branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build: # 一项叫做build的任务
    #runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行
    runs-on: windows-latest # 在最新版的Ubuntu系统下运行  
    
    
    steps:
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1
      
      #- name: Setup NuGet
       # uses: NuGet/setup-nuget@v1.0.2
      - name: Checkout # 将仓库内master分支的内容下载到工作目录
        uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout
      #- name: .NetFramework Action Template
       # uses: auycro/netframework-action-template@v0.0.2
      
      
       
      
      
      - name: Use Node.js 14.x # 配置Node环境
        uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node
        with:
          node-version: "14.x"
      - name: Setup Hexo env
        run: |
          # set up private key for deploy
          #sudo apt-get install nasm
          #mkdir -p ~/.ssh/
          #echo "$HEXO_DEPLOY_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519  # 配置秘钥
          #chmod 600 ~/.ssh/id_ed25519
          #ssh-keyscan github.com >> ~/.ssh/known_hosts
          #ssh-keyscan gitee.com >> ~/.ssh/known_hosts
          # set git infomation
          #git config --global user.name 'linxiaoki'
          #git config --global user.email 'linxiaoki@foxmail.com'
          # install dependencies
          #npm install -g windows-build-tools
          npm install --global --production windows-build-tools --vs2015
          npm install -g node-gyp
          node-gyp install 14.15.4
          node install-node-deps.js
          npm install -g esy
          esy install
          esy bootstrap
          esy build
          esy run -f --checkhealth
          esy '@release' run -f --checkhealth
          esy '@release' install
          esy '@release' run --help
          esy '@release' create
      
      - name: Run a one-line script
        run: ./scripts/windows/publish.ps1
        shell: powershell
  
          # 第二步：打包构建
      - name: Zip Release
        # You may pin to the exact commit or the version.
        # uses: TheDoctor0/zip-release@591e9b128012d3328db6043d0d0266c3ac27f9b5
        uses: TheDoctor0/zip-release@0.6.1
        with:
          # Filename for archive
          filename: oni2_release.zip
          # Base path for archive files
          path:  ./_release
          # Working directory before zipping
          directory: .
          # List of excluded files / directories
          # Tool to use for archiving
          type: zip


      # 第三步：发布 Release
      - name: Create Release # 创建Release，可以在仓库看到一个个版本
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token
        with:
          tag_name: test7 # (tag)标签名称
          release_name: Release ${{ github.ref }}
          draft: false # 是否是草稿
          prerelease: false # 是否是预发布

      # 第四步：上传构建结果到 Release（把打包的tgz上传到Release）
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的
          asset_path: ./oni2_release.zip # 要上传文件
          asset_name: oni2_release.zip # 上传后的文件名
          asset_content_type: application/x-tgz
     
